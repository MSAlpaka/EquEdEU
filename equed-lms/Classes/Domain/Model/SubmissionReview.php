<?php

declare(strict_types=1);

namespace Equed\EquedLms\Domain\Model;

use DateTimeImmutable;
use Equed\Core\Service\ClockInterface;
use Equed\Core\Service\UuidGeneratorInterface;
use Equed\EquedLms\Enum\SubmissionReviewStatus;
use TYPO3\CMS\Extbase\Annotation\Inject;
use TYPO3\CMS\Extbase\Annotation\ORM\Cascade;
use TYPO3\CMS\Extbase\Annotation\ORM\Lazy;
use TYPO3\CMS\Extbase\Annotation\ORM\ManyToOne;
use TYPO3\CMS\Extbase\Domain\Model\FileReference;
use Equed\EquedLms\Domain\Model\FrontendUser;
use TYPO3\CMS\Extbase\DomainObject\AbstractEntity;

/**
 * Domain model for submission reviews.
 */
final class SubmissionReview extends AbstractEntity
{
    protected string $uuid = '';

    #[Inject]
    protected UuidGeneratorInterface $uuidGenerator;

    #[Inject]
    protected ClockInterface $clock;

    #[ManyToOne]
    #[Lazy]
    protected ?UserSubmission $submission = null;

    #[ManyToOne]
    #[Lazy]
    protected ?FrontendUser $reviewedBy = null;

    protected SubmissionReviewStatus $status = SubmissionReviewStatus::Open;

    protected ?string $comment = null;

    #[ManyToOne]
    #[Lazy]
    #[Cascade('remove')]
    protected ?FileReference $evaluationDocument = null;

    protected bool $visibleForUser = false;

    protected bool $wasGeneratedByGpt = false;

    protected string $lang = 'en';

    protected DateTimeImmutable $createdAt;

    protected DateTimeImmutable $updatedAt;

    /**
     * Initializes UUID and timestamps.
     */
    public function initializeObject(): void
    {
        if ($this->uuid === '') {
            $this->uuid = $this->uuidGenerator->generate();
        }

        $now = $this->clock->now();

        if (!isset($this->createdAt)) {
            $this->createdAt = $now;
        }

        if (!isset($this->updatedAt)) {
            $this->updatedAt = $now;
        }
    }

    /**
     * Gets the UUID.
     */
    public function getUuid(): string
    {
        return $this->uuid;
    }

    /**
     * Gets the submission.
     */
    public function getSubmission(): ?UserSubmission
    {
        return $this->submission;
    }

    /**
     * Sets the submission.
     *
     * @param UserSubmission|null $submission
     */
    public function setSubmission(?UserSubmission $submission): void
    {
        $this->submission = $submission;
    }

    /**
     * Gets the reviewer.
     */
    public function getReviewedBy(): ?FrontendUser
    {
        return $this->reviewedBy;
    }

    /**
     * Sets the reviewer.
     *
     * @param FrontendUser|null $reviewedBy
     */
    public function setReviewedBy(?FrontendUser $reviewedBy): void
    {
        $this->reviewedBy = $reviewedBy;
    }

    /**
     * Gets the review status.
     */
    public function getStatus(): SubmissionReviewStatus
    {
        return $this->status;
    }

    /**
     * Sets the review status.
     *
     * @param string $status
     */
    public function setStatus(SubmissionReviewStatus|string $status): void
    {
        if (is_string($status)) {
            $status = SubmissionReviewStatus::from($status);
        }
        $this->status = $status;
    }

    /**
     * Gets the review comment.
     */
    public function getComment(): ?string
    {
        return $this->comment;
    }

    /**
     * Sets the review comment.
     *
     * @param string|null $comment
     */
    public function setComment(?string $comment): void
    {
        $this->comment = $comment;
    }

    /**
     * Gets the evaluation document.
     */
    public function getEvaluationDocument(): ?FileReference
    {
        return $this->evaluationDocument;
    }

    /**
     * Sets the evaluation document.
     *
     * @param FileReference|null $evaluationDocument
     */
    public function setEvaluationDocument(?FileReference $evaluationDocument): void
    {
        $this->evaluationDocument = $evaluationDocument;
    }

    /**
     * Checks if review is visible for user.
     */
    public function isVisibleForUser(): bool
    {
        return $this->visibleForUser;
    }

    /**
     * Sets visibility for user.
     *
     * @param bool $visibleForUser
     */
    public function setVisibleForUser(bool $visibleForUser): void
    {
        $this->visibleForUser = $visibleForUser;
    }

    /**
     * Checks if review was generated by GPT.
     */
    public function isGeneratedByGpt(): bool
    {
        return $this->wasGeneratedByGpt;
    }

    /**
     * Marks whether review was generated by GPT.
     *
     * @param bool $generatedByGpt
     */
    public function setGeneratedByGpt(bool $generatedByGpt): void
    {
        $this->wasGeneratedByGpt = $generatedByGpt;
    }

    /**
     * Gets the language code.
     */
    public function getLang(): string
    {
        return $this->lang;
    }

    /**
     * Sets the language code.
     *
     * @param string $lang
     */
    public function setLang(string $lang): void
    {
        $this->lang = $lang;
    }

    /**
     * Gets the creation time.
     */
    public function getCreatedAt(): DateTimeImmutable
    {
        return $this->createdAt;
    }

    /**
     * Sets the creation time.
     *
     * @param DateTimeImmutable $createdAt
     */
    public function setCreatedAt(DateTimeImmutable $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Gets the last update time.
     */
    public function getUpdatedAt(): DateTimeImmutable
    {
        return $this->updatedAt;
    }

    /**
     * Sets the last update time.
     *
     * @param DateTimeImmutable $updatedAt
     */
    public function setUpdatedAt(DateTimeImmutable $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }
}
