<?php

declare(strict_types=1);

namespace Equed\EquedLms\Domain\Model;

use DateTimeImmutable;
use Ramsey\Uuid\Uuid;
use TYPO3\CMS\Extbase\Annotation\ORM\Cascade;
use TYPO3\CMS\Extbase\Annotation\ORM\Lazy;
use TYPO3\CMS\Extbase\Annotation\ORM\ManyToOne;
use TYPO3\CMS\Extbase\DomainObject\AbstractEntity;
use Equed\EquedLms\Enum\BadgeLevel;

/**
 * CourseCertificate
 *
 * Represents a generated certificate for a completed course instance.
 */
final class CourseCertificate extends AbstractEntity
{
    /** Unique identifier */
    protected string $uuid;

    /** Related user course record */
    #[ManyToOne]
    #[Lazy]
    protected ?UserCourseRecord $userCourseRecord = null;

    /** Template used to generate the certificate */
    #[ManyToOne]
    #[Lazy]
    protected ?CertificateTemplate $certificateTemplate = null;

    /** Dispatch record associated with the certificate */
    #[ManyToOne]
    #[Lazy]
    protected ?CertificateDispatch $certificateDispatch = null;

    /** Human readable certificate number */
    protected string $certificateNumber = '';

    /** Language for generated text */
    protected string $language = 'en';

    /** Badge level represented by this certificate */
    protected BadgeLevel $badgeLevel = BadgeLevel::None;

    /** Whether certificate is publicly visible */
    protected bool $isPublic = true;

    /** Archive flag */
    protected bool $isArchived = false;

    /** Indicates if certificate counts towards badge */
    protected bool $isBadgeRelevant = true;

    /** Created automatically by the system */
    protected bool $isAutoGenerated = false;

    /** Date when certificate was issued */
    protected DateTimeImmutable $issuedAt;

    /** Creation timestamp */
    protected DateTimeImmutable $createdAt;

    /** Last update timestamp */
    protected DateTimeImmutable $updatedAt;

    public function __construct()
    {
        $now = new DateTimeImmutable();
        $this->uuid = Uuid::uuid4()->toString();
        $this->issuedAt = $now;
        $this->createdAt = $now;
        $this->updatedAt = $now;
    }

    public function getUuid(): string
    {
        return $this->uuid;
    }

    public function getUserCourseRecord(): ?UserCourseRecord
    {
        return $this->userCourseRecord;
    }

    public function setUserCourseRecord(?UserCourseRecord $userCourseRecord): void
    {
        $this->userCourseRecord = $userCourseRecord;
    }

    public function getCertificateTemplate(): ?CertificateTemplate
    {
        return $this->certificateTemplate;
    }

    public function setCertificateTemplate(?CertificateTemplate $certificateTemplate): void
    {
        $this->certificateTemplate = $certificateTemplate;
    }

    public function getCertificateDispatch(): ?CertificateDispatch
    {
        return $this->certificateDispatch;
    }

    public function setCertificateDispatch(?CertificateDispatch $certificateDispatch): void
    {
        $this->certificateDispatch = $certificateDispatch;
    }

    public function getCertificateNumber(): string
    {
        return $this->certificateNumber;
    }

    public function setCertificateNumber(string $certificateNumber): void
    {
        $this->certificateNumber = $certificateNumber;
    }

    public function getLanguage(): string
    {
        return $this->language;
    }

    public function setLanguage(string $language): void
    {
        $this->language = $language;
    }

    public function getBadgeLevel(): BadgeLevel
    {
        return $this->badgeLevel;
    }

    public function setBadgeLevel(BadgeLevel $badgeLevel): void
    {
        $this->badgeLevel = $badgeLevel;
    }

    public function isPublic(): bool
    {
        return $this->isPublic;
    }

    public function setIsPublic(bool $isPublic): void
    {
        $this->isPublic = $isPublic;
    }

    public function isArchived(): bool
    {
        return $this->isArchived;
    }

    public function setIsArchived(bool $isArchived): void
    {
        $this->isArchived = $isArchived;
    }

    public function isBadgeRelevant(): bool
    {
        return $this->isBadgeRelevant;
    }

    public function setIsBadgeRelevant(bool $isBadgeRelevant): void
    {
        $this->isBadgeRelevant = $isBadgeRelevant;
    }

    public function isAutoGenerated(): bool
    {
        return $this->isAutoGenerated;
    }

    public function setIsAutoGenerated(bool $isAutoGenerated): void
    {
        $this->isAutoGenerated = $isAutoGenerated;
    }

    public function getIssuedAt(): DateTimeImmutable
    {
        return $this->issuedAt;
    }

    public function setIssuedAt(DateTimeImmutable $issuedAt): void
    {
        $this->issuedAt = $issuedAt;
    }

    public function getCreatedAt(): DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(DateTimeImmutable $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    public function getUpdatedAt(): DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(DateTimeImmutable $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }
}
